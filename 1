#include<iostream>
#include<bitset>
#include<cstdio>
#include<algorithm>
using namespace std;
bitset<48> subkey[16];
int PC_1[56] = {
    57, 49, 41, 33, 25, 17,  9,
    1,  58, 50, 42, 34, 26, 18,
    10,  2, 59, 51, 43, 35, 27,
    19, 11,  3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
     7, 62, 54, 46, 38, 30, 22,
    14,  6, 61, 53, 45, 37, 29,
    21, 13,  5, 28, 20, 12,  4
};
int PC_2[48] = {
    14, 17, 11, 24,  1,  5,
     3, 28, 15,  6, 21, 10,
    23, 19, 12,  4, 26,  8,
    16,  7, 27, 20, 13,  2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};
int key_shift[16] = {
    1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
};
int IP[64] = {
    58, 50, 42, 34, 26, 18, 10,  2,
    60, 52, 44, 36, 28, 20, 12,  4,
    62, 54, 46, 38, 30, 22, 14,  6,
    64, 56, 48, 40, 32, 24, 16,  8,
    57, 49, 41, 33, 25, 17,  9,  1,
    59, 51, 43, 35, 27, 19, 11,  3,
    61, 53, 45, 37, 29, 21, 13,  5,
    63, 55, 47, 39, 31, 23, 15,  7
};

template<std::size_t N>
void reverse(std::bitset<N> &b) {
    for(std::size_t i = 0; i < N/2; ++i) {
        bool t = b[i];
        b[i] = b[N-i-1];
        b[N-i-1] = t;
    }
}

template<std::size_t N>
void output(std::bitset<N> &b) {
    for (auto i=0;i<N;++i)
        cout<<b[i];
    cout<<endl;
}

template<std::size_t N>
void rrt(std::bitset<N>& b, unsigned m) {
    b = b << m | b >> (N-m);
}

template<std::size_t N>
void lrt(std::bitset<N>& b, unsigned m) {
    b = b >> m | b << (N-m);
}

void generate_sub_key(bitset<64> key){
    // Initialize transform
    bitset<56> it_key;
    for (auto i=0;i<56;++i)
        it_key[i] = key[PC_1[i] - 1]; //Note
    output(it_key);
    bitset<28> c; bitset<28> d;
    for (auto bit=0; bit<28; ++bit){
        c[bit] = it_key[bit];
        d[bit] = it_key[bit + 28];
    }
    output(c);
    for (auto i=0; i<16; ++i){
        lrt(c, key_shift[i]); lrt(d, key_shift[i]);
        output(c);
        for (auto bit=0; bit<48; ++bit)
            subkey[i][bit] = PC_2[bit] > 28 ? \
                    d[PC_2[bit] - 29] : c[PC_2[bit] - 1];
    }
    /*
        show subkey
        for (int i=0;i<16;i++){
            cout<<"key "<<i<<": ";
            output(subkey[i]);
        }
    */
}

void block_encry(bitset<64> raw){
    bitset<64> baked;
    for (auto i=0; i<64; ++i)
        baked[i] = raw[IP[i] - 1];
    output(baked);
}



int main()
{
    string key = "0001001100110100010101110111100110011011101111001101111111110001";
    std::reverse(s.begin(), s.end());
    bitset<64> raw_input(s);
    generate_sub_key(raw_input);
}
//https://www.cnblogs.com/lixiaoxu/articles/7736917.html
